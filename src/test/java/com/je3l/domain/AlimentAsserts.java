package com.je3l.domain;

import static com.je3l.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class AlimentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlimentAllPropertiesEquals(Aliment expected, Aliment actual) {
        assertAlimentAutoGeneratedPropertiesEquals(expected, actual);
        assertAlimentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlimentAllUpdatablePropertiesEquals(Aliment expected, Aliment actual) {
        assertAlimentUpdatableFieldsEquals(expected, actual);
        assertAlimentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlimentAutoGeneratedPropertiesEquals(Aliment expected, Aliment actual) {
        assertThat(expected)
            .as("Verify Aliment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlimentUpdatableFieldsEquals(Aliment expected, Aliment actual) {
        assertThat(expected)
            .as("Verify Aliment relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getOrigin()).as("check origin").isEqualTo(actual.getOrigin()))
            .satisfies(e -> assertThat(e.getSeason()).as("check season").isEqualTo(actual.getSeason()))
            .satisfies(e -> assertThat(e.getColor()).as("check color").isEqualTo(actual.getColor()))
            .satisfies(e -> assertThat(e.getWeight()).as("check weight").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getWeight()))
            .satisfies(e -> assertThat(e.getStockQuantity()).as("check stockQuantity").isEqualTo(actual.getStockQuantity()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlimentUpdatableRelationshipsEquals(Aliment expected, Aliment actual) {
        // empty method
    }
}
